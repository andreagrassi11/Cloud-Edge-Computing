stages:
  - build
  - test
  - release

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

.default-before-script:
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"

# Build
docker-build:
  image: docker:20.10.16
  stage: build
  services:
    - docker:dind
  extends: .default-before-script
  script:
    - docker-compose build
    - docker tag quickshare_backend_web "$DOCKER_IMAGE_NAME"
    - docker push "$DOCKER_IMAGE_NAME"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        docker tag quickshare_backend_web "$CI_REGISTRY_IMAGE:latest"
        docker push "$CI_REGISTRY_IMAGE:latest"
      fi
    - |
      if [[ "$CI_COMMIT_BRANCH" == "dev" ]]; then
        docker tag quickshare_backend_web "$CI_REGISTRY_IMAGE:dev"
        docker push "$CI_REGISTRY_IMAGE:dev"
      fi
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "dev"'

# Test
# docker-test:
#   image: docker:20.10.16
#   stage: test
#   services:
#     - docker:dind
#   variables:
#     DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
#   before_script:
#     - apk add --no-cache python3 py3-pip python3-dev build-base curl
#     - ln -sf python3 /usr/bin/python  # Alias python â†’ python3
#     - python -V
#     - python -m venv venv
#     - . venv/bin/activate
#     - pip install --upgrade pip
#     - pip install pipenv
#     - pipenv install
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
#   script:
#     - docker pull "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
#     - docker compose up -d
#     - sleep 10
#     - docker ps -a
#     - curl --fail http://localhost:8000/admin/ || (echo "L'app non ha risposto come atteso" && exit 1)
#     - docker compose down
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "main"'
#     - if: '$CI_COMMIT_BRANCH == "dev"'

# Deploy PROD
release-prod:
  image: python:3.11
  stage: release
  before_script:
    - apt-get update && apt-get install -y python3-pip unzip curl git
    - pip install --upgrade pip
    - pip install awsebcli
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
    - apt-get update && apt-get install -y zip
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        TAG="main"
      fi
    - |
      if [[ "$CI_COMMIT_BRANCH" == "dev" ]]; then
        TAG="dev"
      fi
    - |
      echo '{
        "AWSEBDockerrunVersion": "1",
        "Image": {
          "Name": "'$CI_REGISTRY_IMAGE:$TAG'",
          "Update": "true"
        },
        "Ports": [{"ContainerPort": 8000, "HostPort": 80}]
      }' > Dockerrun.aws.json
    - zip deploy.zip Dockerrun.aws.json
    - |
      if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        eb init QuickshareBack --platform docker --region "$AWS_DEFAULT_REGION"
        eb use QuickshareBack-env
      fi
    - |
      if [[ "$CI_COMMIT_BRANCH" == "dev" ]]; then
        eb init QuickshareBackUAT --platform docker --region "$AWS_DEFAULT_REGION"
        eb use QuickshareBackUAT-env
      fi
    - eb deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "dev"'
    
# Deploy UAT
# release-uat:
#  image: python:3.11
#  stage: release
#  before_script:
#    - apt-get update && apt-get install -y python3-pip unzip curl git
#    - pip install --upgrade pip
#    - pip install awsebcli
#    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
#    - export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
#    - apt-get update && apt-get install -y zip
#    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
#  script:
#    - |
#      echo '{
#        "AWSEBDockerrunVersion": "1",
#        "Image": {
#          "Name": "'$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG'",
#          "Update": "true"
#        },
#        "Ports": [{"ContainerPort": 8000, "HostPort": 80}]
#     }' > Dockerrun.aws.json
#    - zip deploy.zip Dockerrun.aws.json
#    - eb init QuickshareBackUAT --platform docker --region "$AWS_DEFAULT_REGION"
#    - eb use QuickshareBackUAT-env
#    - eb deploy
#  rules:
#    - if: '$CI_COMMIT_BRANCH == "dev"'
    